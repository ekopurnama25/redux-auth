{"ast":null,"code":"import axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\nconst BASE_URL = \"http://localhost:5000/api\";\nconst {\n  users\n} = useSelector(state => state.authReducers);\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(config => {\n  if (users) {\n    config.headers[\"authorization\"] = `Bearer ${users === null || users === void 0 ? void 0 : users.accessToken}`;\n  }\n\n  return config;\n}, error => Promise.reject(error));\naxiosInstance.interceptors.response.use(response => response, async error => {\n  const originalConfig = error.config;\n\n  if (originalConfig.url !== \"/checkusers\" && error.response) {\n    if (error.response.status === 401 && !originalConfig._retry) {\n      originalConfig._retry = true;\n\n      try {\n        const req = await axiosInstance.post(\"/refresh_token/\", {\n          refreshToken: users.refreshTOken\n        });\n        const {\n          accessToken\n        } = req.data;\n        console.log(accessToken);\n        dispatch(refreshTokenAction(accessToken));\n        return axiosInstance(originalConfig);\n      } catch {\n        return Promise.reject(error);\n      }\n    }\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["C:/PROJECT REACT STATE MANAGEMENT/REACT-REDUX-AUTH/auth_redux/src/utils/useAxios.js"],"names":["axios","useSelector","refreshTokenAction","BASE_URL","users","state","authReducers","axiosInstance","create","baseURL","headers","interceptors","request","use","config","accessToken","error","Promise","reject","response","originalConfig","url","status","_retry","req","post","refreshToken","refreshTOken","data","console","log","dispatch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,kBAAT,QAAmC,qCAAnC;AAEA,MAAMC,QAAQ,GAAG,2BAAjB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYH,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACC,YAAlB,CAA7B;AAEA,MAAMC,aAAa,GAAGP,KAAK,CAACQ,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAEN,QADwB;AAEjCO,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFwB,CAAb,CAAtB;AAOAH,aAAa,CAACI,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACGC,MAAD,IAAY;AACV,MAAIV,KAAJ,EAAW;AACTU,IAAAA,MAAM,CAACJ,OAAP,CAAe,eAAf,IAAmC,UAASN,KAAV,aAAUA,KAAV,uBAAUA,KAAK,CAAEW,WAAY,EAA/D;AACD;;AACD,SAAOD,MAAP;AACD,CANH,EAOGE,KAAD,IAAWC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAPb;AAUAT,aAAa,CAACI,YAAd,CAA2BQ,QAA3B,CAAoCN,GAApC,CACGM,QAAD,IAAcA,QADhB,EAEE,MAAOH,KAAP,IAAiB;AACf,QAAMI,cAAc,GAAGJ,KAAK,CAACF,MAA7B;;AACA,MAAIM,cAAc,CAACC,GAAf,KAAuB,aAAvB,IAAwCL,KAAK,CAACG,QAAlD,EAA4D;AAC1D,QAAIH,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiC,CAACF,cAAc,CAACG,MAArD,EAA6D;AAC3DH,MAAAA,cAAc,CAACG,MAAf,GAAwB,IAAxB;;AAEA,UAAI;AACF,cAAMC,GAAG,GAAG,MAAMjB,aAAa,CAACkB,IAAd,CAAmB,iBAAnB,EAAsC;AACtDC,UAAAA,YAAY,EAAEtB,KAAK,CAACuB;AADkC,SAAtC,CAAlB;AAIA,cAAM;AAAEZ,UAAAA;AAAF,YAAkBS,GAAG,CAACI,IAA5B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ;AACAgB,QAAAA,QAAQ,CAAC7B,kBAAkB,CAACa,WAAD,CAAnB,CAAR;AACA,eAAOR,aAAa,CAACa,cAAD,CAApB;AACD,OATD,CASE,MAAM;AACN,eAAOH,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF;AACF;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAvBH;AA0BA,eAAeT,aAAf","sourcesContent":["import axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\r\n\r\nconst BASE_URL = \"http://localhost:5000/api\";\r\nconst { users } = useSelector((state) => state.authReducers);\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    if (users) {\r\n      config.headers[\"authorization\"] = `Bearer ${users?.accessToken}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalConfig = error.config;\r\n    if (originalConfig.url !== \"/checkusers\" && error.response) {\r\n      if (error.response.status === 401 && !originalConfig._retry) {\r\n        originalConfig._retry = true;\r\n\r\n        try {\r\n          const req = await axiosInstance.post(\"/refresh_token/\", {\r\n            refreshToken: users.refreshTOken,\r\n          });\r\n\r\n          const { accessToken } = req.data;\r\n          console.log(accessToken);\r\n          dispatch(refreshTokenAction(accessToken));\r\n          return axiosInstance(originalConfig);\r\n        } catch {\r\n          return Promise.reject(error);\r\n        }\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n"]},"metadata":{},"sourceType":"module"}