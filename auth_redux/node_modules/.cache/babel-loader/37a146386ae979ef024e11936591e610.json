{"ast":null,"code":"import axios from \"axios\";\nconst {\n  isLoggedIn,\n  users\n} = useSelector(state => state.authReducers);\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});\nconsole.log; // axiosInstance.interceptors.request.use(async req => {\n//   if(!authTokens){\n//       authTokens = users.\n//       req.headers.Authorization = `Bearer ${authTokens?.access}`\n//   }\n//   const user = jwt_decode(authTokens.access)\n//   const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\n//   if(!isExpired) return req\n//   const response = await axios.post(`${baseURL}/api/token/refresh/`, {\n//       refresh: authTokens.refresh\n//     });\n//   localStorage.setItem('authTokens', JSON.stringify(response.data))\n//   req.headers.Authorization = `Bearer ${response.data.access}`\n//   return req\n// })","map":{"version":3,"sources":["C:/PROJECT REACT STATE MANAGEMENT/REACT-REDUX-AUTH/auth_redux/src/utils/FetchApi.js"],"names":["axios","isLoggedIn","users","useSelector","state","authReducers","axiosInstance","create","baseURL","headers","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAM;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAAwBC,WAAW,CAAEC,KAAD,IAAWA,KAAK,CAACC,YAAlB,CAAzC;AAEA,MAAMC,aAAa,GAAGN,KAAK,CAACO,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAE,2BADwB;AAEjCC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFwB,CAAb,CAAtB;AAMAC,OAAO,CAACC,GAAR,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import axios from \"axios\";\r\n\r\nconst { isLoggedIn, users } = useSelector((state) => state.authReducers);\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: \"http://localhost:5000/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n  },\r\n});\r\nconsole.log\r\n\r\n// axiosInstance.interceptors.request.use(async req => {\r\n//   if(!authTokens){\r\n//       authTokens = users.\r\n//       req.headers.Authorization = `Bearer ${authTokens?.access}`\r\n//   }\r\n\r\n//   const user = jwt_decode(authTokens.access)\r\n//   const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\r\n\r\n//   if(!isExpired) return req\r\n\r\n//   const response = await axios.post(`${baseURL}/api/token/refresh/`, {\r\n//       refresh: authTokens.refresh\r\n//     });\r\n\r\n//   localStorage.setItem('authTokens', JSON.stringify(response.data))\r\n//   req.headers.Authorization = `Bearer ${response.data.access}`\r\n//   return req\r\n// })\r\n"]},"metadata":{},"sourceType":"module"}