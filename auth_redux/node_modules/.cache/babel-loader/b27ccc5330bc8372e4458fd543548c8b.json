{"ast":null,"code":"import axiosInstance from \"./useAxios\";\nimport { useEffect } from \"react\";\n\nconst useAxiosPrivate = store => {\n  axiosInstance.interceptors.request.use(config => {\n    const users = TokenService.getLocalAccessToken();\n\n    if (token) {\n      config.headers[\"Authorization\"] = \"Bearer \" + token; // for Spring Boot back-end\n      //config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  const {\n    dispatch\n  } = store;\n  axiosInstance.interceptors.response.use(res => {\n    return res;\n  }, async err => {\n    const originalConfig = err.config;\n\n    if (originalConfig.url !== \"/auth/signin\" && err.response) {\n      // Access Token was expired\n      if (err.response.status === 401 && !originalConfig._retry) {\n        originalConfig._retry = true;\n\n        try {\n          const rs = await axiosInstance.post(\"/auth/refreshtoken\", {\n            refreshToken: TokenService.getLocalRefreshToken()\n          });\n          const {\n            accessToken\n          } = rs.data;\n          dispatch(refreshToken(accessToken));\n          TokenService.updateLocalAccessToken(accessToken);\n          return axiosInstance(originalConfig);\n        } catch (_error) {\n          return Promise.reject(_error);\n        }\n      }\n    }\n\n    return Promise.reject(err);\n  });\n};\n\nexport default useAxiosPrivate;","map":{"version":3,"sources":["C:/PROJECT REACT STATE MANAGEMENT/REACT-REDUX-AUTH/auth_redux/src/utils/useAxiosPrivate.js"],"names":["axiosInstance","useEffect","useAxiosPrivate","store","interceptors","request","use","config","users","TokenService","getLocalAccessToken","token","headers","error","Promise","reject","dispatch","response","res","err","originalConfig","url","status","_retry","rs","post","refreshToken","getLocalRefreshToken","accessToken","data","updateLocalAccessToken","_error"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,YAA1B;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjCH,EAAAA,aAAa,CAACI,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACGC,MAAD,IAAY;AACV,UAAMC,KAAK,GAAGC,YAAY,CAACC,mBAAb,EAAd;;AACA,QAAIC,KAAJ,EAAW;AACTJ,MAAAA,MAAM,CAACK,OAAP,CAAe,eAAf,IAAkC,YAAYD,KAA9C,CADS,CAC4C;AACrD;AACD;;AACD,WAAOJ,MAAP;AACD,GARH,EASGM,KAAD,IAAW;AACT,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GAXH;AAcA,QAAM;AAAEG,IAAAA;AAAF,MAAeb,KAArB;AACAH,EAAAA,aAAa,CAACI,YAAd,CAA2Ba,QAA3B,CAAoCX,GAApC,CACGY,GAAD,IAAS;AACP,WAAOA,GAAP;AACD,GAHH,EAIE,MAAOC,GAAP,IAAe;AACb,UAAMC,cAAc,GAAGD,GAAG,CAACZ,MAA3B;;AAEA,QAAIa,cAAc,CAACC,GAAf,KAAuB,cAAvB,IAAyCF,GAAG,CAACF,QAAjD,EAA2D;AACzD;AACA,UAAIE,GAAG,CAACF,QAAJ,CAAaK,MAAb,KAAwB,GAAxB,IAA+B,CAACF,cAAc,CAACG,MAAnD,EAA2D;AACzDH,QAAAA,cAAc,CAACG,MAAf,GAAwB,IAAxB;;AAEA,YAAI;AACF,gBAAMC,EAAE,GAAG,MAAMxB,aAAa,CAACyB,IAAd,CAAmB,oBAAnB,EAAyC;AACxDC,YAAAA,YAAY,EAAEjB,YAAY,CAACkB,oBAAb;AAD0C,WAAzC,CAAjB;AAIA,gBAAM;AAAEC,YAAAA;AAAF,cAAkBJ,EAAE,CAACK,IAA3B;AAEAb,UAAAA,QAAQ,CAACU,YAAY,CAACE,WAAD,CAAb,CAAR;AACAnB,UAAAA,YAAY,CAACqB,sBAAb,CAAoCF,WAApC;AAEA,iBAAO5B,aAAa,CAACoB,cAAD,CAApB;AACD,SAXD,CAWE,OAAOW,MAAP,EAAe;AACf,iBAAOjB,OAAO,CAACC,MAAR,CAAegB,MAAf,CAAP;AACD;AACF;AACF;;AAED,WAAOjB,OAAO,CAACC,MAAR,CAAeI,GAAf,CAAP;AACD,GA9BH;AAgCD,CAhDD;;AAkDA,eAAejB,eAAf","sourcesContent":["import axiosInstance from \"./useAxios\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst useAxiosPrivate = (store) => {\r\n  axiosInstance.interceptors.request.use(\r\n    (config) => {\r\n      const users = TokenService.getLocalAccessToken();\r\n      if (token) {\r\n        config.headers[\"Authorization\"] = \"Bearer \" + token; // for Spring Boot back-end\r\n        //config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  const { dispatch } = store;\r\n  axiosInstance.interceptors.response.use(\r\n    (res) => {\r\n      return res;\r\n    },\r\n    async (err) => {\r\n      const originalConfig = err.config;\r\n\r\n      if (originalConfig.url !== \"/auth/signin\" && err.response) {\r\n        // Access Token was expired\r\n        if (err.response.status === 401 && !originalConfig._retry) {\r\n          originalConfig._retry = true;\r\n\r\n          try {\r\n            const rs = await axiosInstance.post(\"/auth/refreshtoken\", {\r\n              refreshToken: TokenService.getLocalRefreshToken(),\r\n            });\r\n\r\n            const { accessToken } = rs.data;\r\n\r\n            dispatch(refreshToken(accessToken));\r\n            TokenService.updateLocalAccessToken(accessToken);\r\n\r\n            return axiosInstance(originalConfig);\r\n          } catch (_error) {\r\n            return Promise.reject(_error);\r\n          }\r\n        }\r\n      }\r\n\r\n      return Promise.reject(err);\r\n    }\r\n  );\r\n};\r\n\r\nexport default useAxiosPrivate;\r\n"]},"metadata":{},"sourceType":"module"}