{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axiosInstance from \"./useAxios\";\nimport { useSelector } from \"react-redux\";\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\n\nconst useAxiosPrivate = store => {\n  _s();\n\n  const {\n    users\n  } = useSelector(state => state.authReducers);\n  axiosInstance.interceptors.request.use(config => {\n    if (users) {\n      config.headers[\"authorization\"] = `Bearer ${users === null || users === void 0 ? void 0 : users.accessToken}`;\n    }\n\n    return config;\n  }, error => Promise.reject(error));\n  const {\n    dispatch\n  } = store;\n  axiosInstance.interceptors.response.use(response => response, async error => {\n    const originalConfig = error.config;\n\n    if (originalConfig.url !== \"/checkusers\" && error.response) {\n      if (error.response.status === 401 && !originalConfig._retry) {\n        originalConfig._retry = true;\n\n        try {\n          const req = await axiosInstance.post(\"/refresh_token/\", {\n            refreshToken: users.refreshTOken\n          });\n          const {\n            accessToken\n          } = req.data;\n          console.log(accessToken);\n          dispatch(refreshTokenAction(accessToken));\n          return axiosInstance(originalConfig);\n        } catch {\n          return Promise.reject(error);\n        }\n      }\n    }\n\n    return Promise.reject(error);\n  });\n};\n\n_s(useAxiosPrivate, \"V/z1XVlAcsE+Fi5UJdza+2p1LZc=\", false, function () {\n  return [useSelector];\n});\n\nexport default useAxiosPrivate;","map":{"version":3,"sources":["C:/PROJECT REACT STATE MANAGEMENT/REACT-REDUX-AUTH/auth_redux/src/utils/useAxiosPrivate.js"],"names":["axiosInstance","useSelector","refreshTokenAction","useAxiosPrivate","store","users","state","authReducers","interceptors","request","use","config","headers","accessToken","error","Promise","reject","dispatch","response","originalConfig","url","status","_retry","req","post","refreshToken","refreshTOken","data","console","log"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,YAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,kBAAT,QAAmC,qCAAnC;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAYJ,WAAW,CAAEK,KAAD,IAAWA,KAAK,CAACC,YAAlB,CAA7B;AACAP,EAAAA,aAAa,CAACQ,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACGC,MAAD,IAAY;AACV,QAAIN,KAAJ,EAAW;AACTM,MAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAmC,UAASP,KAAV,aAAUA,KAAV,uBAAUA,KAAK,CAAEQ,WAAY,EAA/D;AACD;;AACD,WAAOF,MAAP;AACD,GANH,EAOGG,KAAD,IAAWC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAPb;AAUA,QAAM;AAAEG,IAAAA;AAAF,MAAeb,KAArB;AACAJ,EAAAA,aAAa,CAACQ,YAAd,CAA2BU,QAA3B,CAAoCR,GAApC,CACGQ,QAAD,IAAcA,QADhB,EAEE,MAAOJ,KAAP,IAAiB;AACf,UAAMK,cAAc,GAAGL,KAAK,CAACH,MAA7B;;AACA,QAAIQ,cAAc,CAACC,GAAf,KAAuB,aAAvB,IAAwCN,KAAK,CAACI,QAAlD,EAA4D;AAC1D,UAAIJ,KAAK,CAACI,QAAN,CAAeG,MAAf,KAA0B,GAA1B,IAAiC,CAACF,cAAc,CAACG,MAArD,EAA6D;AAC3DH,QAAAA,cAAc,CAACG,MAAf,GAAwB,IAAxB;;AAEA,YAAI;AACF,gBAAMC,GAAG,GAAG,MAAMvB,aAAa,CAACwB,IAAd,CAAmB,iBAAnB,EAAsC;AACtDC,YAAAA,YAAY,EAAEpB,KAAK,CAACqB;AADkC,WAAtC,CAAlB;AAIA,gBAAM;AAAEb,YAAAA;AAAF,cAAkBU,GAAG,CAACI,IAA5B;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYhB,WAAZ;AACAI,UAAAA,QAAQ,CAACf,kBAAkB,CAACW,WAAD,CAAnB,CAAR;AACA,iBAAOb,aAAa,CAACmB,cAAD,CAApB;AACD,SATD,CASE,MAAM;AACN,iBAAOJ,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF;AACF;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GAvBH;AAyBD,CAtCD;;GAAMX,e;UACcF,W;;;AAuCpB,eAAeE,eAAf","sourcesContent":["import axiosInstance from \"./useAxios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\r\n\r\nconst useAxiosPrivate = (store) => {\r\n  const { users } = useSelector((state) => state.authReducers);\r\n  axiosInstance.interceptors.request.use(\r\n    (config) => {\r\n      if (users) {\r\n        config.headers[\"authorization\"] = `Bearer ${users?.accessToken}`;\r\n      }\r\n      return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n  );\r\n\r\n  const { dispatch } = store;\r\n  axiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n      const originalConfig = error.config;\r\n      if (originalConfig.url !== \"/checkusers\" && error.response) {\r\n        if (error.response.status === 401 && !originalConfig._retry) {\r\n          originalConfig._retry = true;\r\n\r\n          try {\r\n            const req = await axiosInstance.post(\"/refresh_token/\", {\r\n              refreshToken: users.refreshTOken,\r\n            });\r\n\r\n            const { accessToken } = req.data;\r\n            console.log(accessToken);\r\n            dispatch(refreshTokenAction(accessToken));\r\n            return axiosInstance(originalConfig);\r\n          } catch {\r\n            return Promise.reject(error);\r\n          }\r\n        }\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n};\r\n\r\nexport default useAxiosPrivate;\r\n"]},"metadata":{},"sourceType":"module"}