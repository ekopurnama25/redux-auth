{"ast":null,"code":"import axios from \"axios\";\nconst {\n  isLoggedIn,\n  users\n} = useSelector(state => state.authReducers);\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(async req => {\n  if (!authTokens) {\n    var _authTokens;\n\n    authTokens = users;\n    req.headers.Authorization = `Bearer ${(_authTokens = authTokens) === null || _authTokens === void 0 ? void 0 : _authTokens.access}`;\n  }\n\n  const user = jwt_decode(authTokens.access);\n  const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\n  if (!isExpired) return req;\n  const response = await axios.post(`${baseURL}/api/token/refresh/`, {\n    refresh: authTokens.refresh\n  });\n  localStorage.setItem('authTokens', JSON.stringify(response.data));\n  req.headers.Authorization = `Bearer ${response.data.access}`;\n  return req;\n});","map":{"version":3,"sources":["C:/PROJECT REACT STATE MANAGEMENT/REACT-REDUX-AUTH/auth_redux/src/utils/FetchApi.js"],"names":["axios","isLoggedIn","users","useSelector","state","authReducers","axiosInstance","create","baseURL","headers","interceptors","request","use","req","authTokens","Authorization","access","user","jwt_decode","isExpired","dayjs","unix","exp","diff","response","post","refresh","localStorage","setItem","JSON","stringify","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAM;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAAwBC,WAAW,CAAEC,KAAD,IAAWA,KAAK,CAACC,YAAlB,CAAzC;AAEA,MAAMC,aAAa,GAAGN,KAAK,CAACO,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAE,2BADwB;AAEjCC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFwB,CAAb,CAAtB;AAOAH,aAAa,CAACI,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,MAAMC,GAAN,IAAa;AAClD,MAAG,CAACC,UAAJ,EAAe;AAAA;;AACXA,IAAAA,UAAU,GAAGZ,KAAb;AACAW,IAAAA,GAAG,CAACJ,OAAJ,CAAYM,aAAZ,GAA6B,UAAD,eAAUD,UAAV,gDAAU,YAAYE,MAAO,EAAzD;AACH;;AAED,QAAMC,IAAI,GAAGC,UAAU,CAACJ,UAAU,CAACE,MAAZ,CAAvB;AACA,QAAMG,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWJ,IAAI,CAACK,GAAhB,EAAqBC,IAArB,CAA0BH,KAAK,EAA/B,IAAqC,CAAvD;AAEA,MAAG,CAACD,SAAJ,EAAe,OAAON,GAAP;AAEf,QAAMW,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,IAAN,CAAY,GAAEjB,OAAQ,qBAAtB,EAA4C;AAC/DkB,IAAAA,OAAO,EAAEZ,UAAU,CAACY;AAD2C,GAA5C,CAAvB;AAIAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCC,IAAI,CAACC,SAAL,CAAeN,QAAQ,CAACO,IAAxB,CAAnC;AACAlB,EAAAA,GAAG,CAACJ,OAAJ,CAAYM,aAAZ,GAA6B,UAASS,QAAQ,CAACO,IAAT,CAAcf,MAAO,EAA3D;AACA,SAAOH,GAAP;AACD,CAlBD","sourcesContent":["import axios from \"axios\";\r\n\r\nconst { isLoggedIn, users } = useSelector((state) => state.authReducers);\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: \"http://localhost:5000/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(async req => {\r\n  if(!authTokens){\r\n      authTokens = users\r\n      req.headers.Authorization = `Bearer ${authTokens?.access}`\r\n  }\r\n\r\n  const user = jwt_decode(authTokens.access)\r\n  const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\r\n\r\n  if(!isExpired) return req\r\n\r\n  const response = await axios.post(`${baseURL}/api/token/refresh/`, {\r\n      refresh: authTokens.refresh\r\n    });\r\n\r\n  localStorage.setItem('authTokens', JSON.stringify(response.data))\r\n  req.headers.Authorization = `Bearer ${response.data.access}`\r\n  return req\r\n})\r\n"]},"metadata":{},"sourceType":"module"}