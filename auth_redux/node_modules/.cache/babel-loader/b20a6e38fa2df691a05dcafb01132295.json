{"ast":null,"code":"import axiosInstance from \"./useAxios\";\nimport { useSelector } from \"react-redux\";\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\n\nconst useAxiosPrivate = store => {\n  //const { dispatch } = store;\n  axiosInstance.interceptors.request.use(config => {\n    if (users) {\n      var _users;\n\n      config.headers[\"authorization\"] = `Bearer ${(_users = users) === null || _users === void 0 ? void 0 : _users.accessToken}`;\n    }\n\n    return config;\n  }, error => Promise.reject(error));\n  axiosInstance.interceptors.response.use(response => response, async error => {\n    var _error$response;\n\n    const originalConfig = error.config;\n\n    if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalConfig._retry) {\n      originalConfig._retry = true;\n\n      try {\n        const req = await axiosInstance.post(\"/refresh_token/\", {\n          refreshToken: users.refreshTOken\n        });\n        const {\n          accessToken\n        } = req.data;\n        console.log(accessToken);\n        dispatch(refreshTokenAction(accessToken));\n        return axiosInstance(originalConfig);\n      } catch {\n        return Promise.reject(error);\n      }\n    }\n\n    return Promise.reject(error);\n  });\n};\n\nexport default useAxiosPrivate;","map":{"version":3,"sources":["C:/PROJECT REACT STATE MANAGEMENT/REACT-REDUX-AUTH/auth_redux/src/utils/useAxiosPrivate.js"],"names":["axiosInstance","useSelector","refreshTokenAction","useAxiosPrivate","store","interceptors","request","use","config","users","headers","accessToken","error","Promise","reject","response","originalConfig","status","_retry","req","post","refreshToken","refreshTOken","data","console","log","dispatch"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,YAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,kBAAT,QAAmC,qCAAnC;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC;AACAJ,EAAAA,aAAa,CAACK,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACGC,MAAD,IAAY;AAEV,QAAIC,KAAJ,EAAW;AAAA;;AACTD,MAAAA,MAAM,CAACE,OAAP,CAAe,eAAf,IAAmC,UAAD,UAAUD,KAAV,2CAAU,OAAOE,WAAY,EAA/D;AACD;;AACD,WAAOH,MAAP;AACD,GAPH,EAQGI,KAAD,IAAWC,OAAO,CAACC,MAAR,CAAeF,KAAf,CARb;AAUAZ,EAAAA,aAAa,CAACK,YAAd,CAA2BU,QAA3B,CAAoCR,GAApC,CACGQ,QAAD,IAAcA,QADhB,EAEE,MAAOH,KAAP,IAAiB;AAAA;;AACf,UAAMI,cAAc,GAAGJ,KAAK,CAACJ,MAA7B;;AAEA,QAAI,CAAAI,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEG,QAAP,oEAAiBE,MAAjB,MAA4B,GAA5B,IAAmC,CAACD,cAAc,CAACE,MAAvD,EAA+D;AAC7DF,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;;AAEA,UAAI;AACF,cAAMC,GAAG,GAAG,MAAMnB,aAAa,CAACoB,IAAd,CAAmB,iBAAnB,EAAsC;AACtDC,UAAAA,YAAY,EAAEZ,KAAK,CAACa;AADkC,SAAtC,CAAlB;AAIA,cAAM;AAAEX,UAAAA;AAAF,YAAkBQ,GAAG,CAACI,IAA5B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYd,WAAZ;AACAe,QAAAA,QAAQ,CAACxB,kBAAkB,CAACS,WAAD,CAAnB,CAAR;AACA,eAAOX,aAAa,CAACgB,cAAD,CAApB;AACD,OATD,CASE,MAAM;AACN,eAAOH,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GAtBH;AAwBD,CApCD;;AAsCA,eAAeT,eAAf","sourcesContent":["import axiosInstance from \"./useAxios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\r\n\r\nconst useAxiosPrivate = (store) => {\r\n  //const { dispatch } = store;\r\n  axiosInstance.interceptors.request.use(\r\n    (config) => {\r\n     \r\n      if (users) {\r\n        config.headers[\"authorization\"] = `Bearer ${users?.accessToken}`;\r\n      }\r\n      return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n  );\r\n  axiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n      const originalConfig = error.config;\r\n\r\n      if (error?.response?.status === 401 && !originalConfig._retry) {\r\n        originalConfig._retry = true;\r\n\r\n        try {\r\n          const req = await axiosInstance.post(\"/refresh_token/\", {\r\n            refreshToken: users.refreshTOken,\r\n          });\r\n\r\n          const { accessToken } = req.data;\r\n          console.log(accessToken);\r\n          dispatch(refreshTokenAction(accessToken));\r\n          return axiosInstance(originalConfig);\r\n        } catch {\r\n          return Promise.reject(error);\r\n        }\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n};\r\n\r\nexport default useAxiosPrivate;\r\n"]},"metadata":{},"sourceType":"module"}