{"ast":null,"code":"import axiosInstance from \"./useAxios\";\nimport { useEffect } from \"react\";\nimport { getCookie } from \"./setCookie\";\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\n\nconst useAxiosPrivate = store => {\n  axiosInstance.interceptors.request.use(config => {\n    const users = getCookie();\n\n    if (users) {\n      config.headers[\"Authorization\"] = \"Bearer \" + (users === null || users === void 0 ? void 0 : users.accessToken); // for Spring Boot back-end\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  const {\n    dispatch\n  } = store;\n  axiosInstance.interceptors.response.use(res => {\n    return res;\n  }, async err => {\n    const users = getCookie();\n    const originalConfig = err.config;\n\n    if (originalConfig.url !== \"/auth/\" && err.response) {\n      // Access Token was expired\n      if (err.response.status === 401 && !originalConfig._retry) {\n        originalConfig._retry = true;\n\n        try {\n          const rs = await axiosInstance.post(\"/refresh_token/\", {\n            refreshToken: users === null || users === void 0 ? void 0 : users.refreshToken\n          });\n          const {\n            accessToken\n          } = rs.data;\n          dispatch(refreshTokenAction(accessToken));\n          return axiosInstance(originalConfig);\n        } catch (_error) {\n          return Promise.reject(_error);\n        }\n      }\n    }\n\n    return Promise.reject(err);\n  });\n};\n\nexport default useAxiosPrivate;","map":{"version":3,"sources":["C:/PROJECT REACT STATE MANAGEMENT/REACT-REDUX-AUTH/auth_redux/src/utils/useAxiosPrivate.js"],"names":["axiosInstance","useEffect","getCookie","refreshTokenAction","useAxiosPrivate","store","interceptors","request","use","config","users","headers","accessToken","error","Promise","reject","dispatch","response","res","err","originalConfig","url","status","_retry","rs","post","refreshToken","data","_error"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,YAA1B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,kBAAT,QAAmC,qCAAnC;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjCL,EAAAA,aAAa,CAACM,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACGC,MAAD,IAAY;AACV,UAAMC,KAAK,GAAGR,SAAS,EAAvB;;AACA,QAAIQ,KAAJ,EAAW;AACTD,MAAAA,MAAM,CAACE,OAAP,CAAe,eAAf,IAAkC,aAAYD,KAAZ,aAAYA,KAAZ,uBAAYA,KAAK,CAAEE,WAAnB,CAAlC,CADS,CACyD;AACnE;;AACD,WAAOH,MAAP;AACD,GAPH,EAQGI,KAAD,IAAW;AACT,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GAVH;AAaA,QAAM;AAAEG,IAAAA;AAAF,MAAeX,KAArB;AACAL,EAAAA,aAAa,CAACM,YAAd,CAA2BW,QAA3B,CAAoCT,GAApC,CACGU,GAAD,IAAS;AACP,WAAOA,GAAP;AACD,GAHH,EAIE,MAAOC,GAAP,IAAe;AACb,UAAMT,KAAK,GAAGR,SAAS,EAAvB;AACA,UAAMkB,cAAc,GAAGD,GAAG,CAACV,MAA3B;;AAEA,QAAIW,cAAc,CAACC,GAAf,KAAuB,QAAvB,IAAmCF,GAAG,CAACF,QAA3C,EAAqD;AACnD;AACA,UAAIE,GAAG,CAACF,QAAJ,CAAaK,MAAb,KAAwB,GAAxB,IAA+B,CAACF,cAAc,CAACG,MAAnD,EAA2D;AACzDH,QAAAA,cAAc,CAACG,MAAf,GAAwB,IAAxB;;AAEA,YAAI;AACF,gBAAMC,EAAE,GAAG,MAAMxB,aAAa,CAACyB,IAAd,CAAmB,iBAAnB,EAAsC;AACrDC,YAAAA,YAAY,EAAEhB,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEgB;AADgC,WAAtC,CAAjB;AAIA,gBAAM;AAAEd,YAAAA;AAAF,cAAkBY,EAAE,CAACG,IAA3B;AAEAX,UAAAA,QAAQ,CAACb,kBAAkB,CAACS,WAAD,CAAnB,CAAR;AAEA,iBAAOZ,aAAa,CAACoB,cAAD,CAApB;AACD,SAVD,CAUE,OAAOQ,MAAP,EAAe;AACf,iBAAOd,OAAO,CAACC,MAAR,CAAea,MAAf,CAAP;AACD;AACF;AACF;;AAED,WAAOd,OAAO,CAACC,MAAR,CAAeI,GAAf,CAAP;AACD,GA9BH;AAgCD,CA/CD;;AAiDA,eAAef,eAAf","sourcesContent":["import axiosInstance from \"./useAxios\";\r\nimport { useEffect } from \"react\";\r\nimport { getCookie } from \"./setCookie\";\r\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\r\n\r\nconst useAxiosPrivate = (store) => {\r\n  axiosInstance.interceptors.request.use(\r\n    (config) => {\r\n      const users = getCookie();\r\n      if (users) {\r\n        config.headers[\"Authorization\"] = \"Bearer \" + users?.accessToken; // for Spring Boot back-end\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  const { dispatch } = store;\r\n  axiosInstance.interceptors.response.use(\r\n    (res) => {\r\n      return res;\r\n    },\r\n    async (err) => {\r\n      const users = getCookie();\r\n      const originalConfig = err.config;\r\n\r\n      if (originalConfig.url !== \"/auth/\" && err.response) {\r\n        // Access Token was expired\r\n        if (err.response.status === 401 && !originalConfig._retry) {\r\n          originalConfig._retry = true;\r\n\r\n          try {\r\n            const rs = await axiosInstance.post(\"/refresh_token/\", {\r\n              refreshToken: users?.refreshToken,\r\n            });\r\n\r\n            const { accessToken } = rs.data;\r\n\r\n            dispatch(refreshTokenAction(accessToken));\r\n\r\n            return axiosInstance(originalConfig);\r\n          } catch (_error) {\r\n            return Promise.reject(_error);\r\n          }\r\n        }\r\n      }\r\n\r\n      return Promise.reject(err);\r\n    }\r\n  );\r\n};\r\n\r\nexport default useAxiosPrivate;\r\n"]},"metadata":{},"sourceType":"module"}