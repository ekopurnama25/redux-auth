{"ast":null,"code":"import axios from \"axios\";\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(async req => {\n  if (!authTokens) {\n    var _authTokens;\n\n    authTokens = localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null;\n    req.headers.Authorization = `Bearer ${(_authTokens = authTokens) === null || _authTokens === void 0 ? void 0 : _authTokens.access}`;\n  }\n\n  const user = jwt_decode(authTokens.access);\n  const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\n  if (!isExpired) return req;\n  const response = await axios.post(`${baseURL}/api/token/refresh/`, {\n    refresh: authTokens.refresh\n  });\n  localStorage.setItem('authTokens', JSON.stringify(response.data));\n  req.headers.Authorization = `Bearer ${response.data.access}`;\n  return req;\n});","map":{"version":3,"sources":["C:/PROJECT REACT STATE MANAGEMENT/REACT-REDUX-AUTH/auth_redux/src/utils/FetchApi.js"],"names":["axios","axiosInstance","create","baseURL","headers","interceptors","request","use","req","authTokens","localStorage","getItem","JSON","parse","Authorization","access","user","jwt_decode","isExpired","dayjs","unix","exp","diff","response","post","refresh","setItem","stringify","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAN,CAAa;AACjCC,EAAAA,OAAO,EAAE,2BADwB;AAEjCC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFwB,CAAb,CAAtB;AAOAH,aAAa,CAACI,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,MAAMC,GAAN,IAAa;AAClD,MAAG,CAACC,UAAJ,EAAe;AAAA;;AACXA,IAAAA,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,IAAqCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,CAArC,GAAsF,IAAnG;AACAH,IAAAA,GAAG,CAACJ,OAAJ,CAAYU,aAAZ,GAA6B,UAAD,eAAUL,UAAV,gDAAU,YAAYM,MAAO,EAAzD;AACH;;AAED,QAAMC,IAAI,GAAGC,UAAU,CAACR,UAAU,CAACM,MAAZ,CAAvB;AACA,QAAMG,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWJ,IAAI,CAACK,GAAhB,EAAqBC,IAArB,CAA0BH,KAAK,EAA/B,IAAqC,CAAvD;AAEA,MAAG,CAACD,SAAJ,EAAe,OAAOV,GAAP;AAEf,QAAMe,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,IAAN,CAAY,GAAErB,OAAQ,qBAAtB,EAA4C;AAC/DsB,IAAAA,OAAO,EAAEhB,UAAU,CAACgB;AAD2C,GAA5C,CAAvB;AAIAf,EAAAA,YAAY,CAACgB,OAAb,CAAqB,YAArB,EAAmCd,IAAI,CAACe,SAAL,CAAeJ,QAAQ,CAACK,IAAxB,CAAnC;AACApB,EAAAA,GAAG,CAACJ,OAAJ,CAAYU,aAAZ,GAA6B,UAASS,QAAQ,CAACK,IAAT,CAAcb,MAAO,EAA3D;AACA,SAAOP,GAAP;AACD,CAlBD","sourcesContent":["import axios from \"axios\";\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: \"http://localhost:5000/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(async req => {\r\n  if(!authTokens){\r\n      authTokens = localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : null\r\n      req.headers.Authorization = `Bearer ${authTokens?.access}`\r\n  }\r\n\r\n  const user = jwt_decode(authTokens.access)\r\n  const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\r\n\r\n  if(!isExpired) return req\r\n\r\n  const response = await axios.post(`${baseURL}/api/token/refresh/`, {\r\n      refresh: authTokens.refresh\r\n    });\r\n\r\n  localStorage.setItem('authTokens', JSON.stringify(response.data))\r\n  req.headers.Authorization = `Bearer ${response.data.access}`\r\n  return req\r\n})\r\n"]},"metadata":{},"sourceType":"module"}