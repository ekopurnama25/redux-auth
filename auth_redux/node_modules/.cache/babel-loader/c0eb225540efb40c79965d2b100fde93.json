{"ast":null,"code":"import axiosInstance from \"./useAxios\";\nimport { getCookie } from \"./setCookie\";\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\n\nconst setupInterceptors = store => {\n  axiosInstance.interceptors.request.use(config => {\n    console.log(config);\n    const users = getCookie();\n\n    if (users) {\n      config.headers[\"Authorization\"] = \"Bearer \" + (users === null || users === void 0 ? void 0 : users.accessToken); // for Spring Boot back-end\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  const {\n    dispatch\n  } = store;\n  axiosInstance.interceptors.response.use(res => {\n    return res;\n  }, async err => {\n    const users = getCookie();\n    const originalConfig = err.config;\n\n    if (err.response.status === 401 && !originalConfig._retry) {\n      originalConfig._retry = true;\n\n      try {\n        const rs = await axiosInstance.post(\"/refresh_token/\", {\n          refreshToken: users === null || users === void 0 ? void 0 : users.refreshToken\n        });\n        console.log(rs);\n        const {\n          accessToken\n        } = rs.data;\n        dispatch(refreshTokenAction(accessToken));\n        return axiosInstance(originalConfig);\n      } catch (_error) {\n        return Promise.reject(_error);\n      }\n    }\n\n    return Promise.reject(err);\n  });\n};\n\nexport default setupInterceptors;","map":{"version":3,"sources":["C:/PROJECT REACT STATE MANAGEMENT/REACT-REDUX-AUTH/auth_redux/src/utils/setupInterceptors.js"],"names":["axiosInstance","getCookie","refreshTokenAction","setupInterceptors","store","interceptors","request","use","config","console","log","users","headers","accessToken","error","Promise","reject","dispatch","response","res","err","originalConfig","status","_retry","rs","post","refreshToken","data","_error"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,YAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,kBAAT,QAAmC,qCAAnC;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnCJ,EAAAA,aAAa,CAACK,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACGC,MAAD,IAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAMG,KAAK,GAAGV,SAAS,EAAvB;;AACA,QAAIU,KAAJ,EAAW;AACTH,MAAAA,MAAM,CAACI,OAAP,CAAe,eAAf,IAAkC,aAAYD,KAAZ,aAAYA,KAAZ,uBAAYA,KAAK,CAAEE,WAAnB,CAAlC,CADS,CACyD;AACnE;;AACD,WAAOL,MAAP;AACD,GARH,EASGM,KAAD,IAAW;AACT,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GAXH;AAcA,QAAM;AAAEG,IAAAA;AAAF,MAAeb,KAArB;AACAJ,EAAAA,aAAa,CAACK,YAAd,CAA2Ba,QAA3B,CAAoCX,GAApC,CACGY,GAAD,IAAS;AACP,WAAOA,GAAP;AACD,GAHH,EAIE,MAAOC,GAAP,IAAe;AACb,UAAMT,KAAK,GAAGV,SAAS,EAAvB;AACA,UAAMoB,cAAc,GAAGD,GAAG,CAACZ,MAA3B;;AAEA,QAAIY,GAAG,CAACF,QAAJ,CAAaI,MAAb,KAAwB,GAAxB,IAA+B,CAACD,cAAc,CAACE,MAAnD,EAA2D;AACzDF,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;;AAEA,UAAI;AACF,cAAMC,EAAE,GAAG,MAAMxB,aAAa,CAACyB,IAAd,CAAmB,iBAAnB,EAAsC;AACrDC,UAAAA,YAAY,EAAEf,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEe;AADgC,SAAtC,CAAjB;AAIAjB,QAAAA,OAAO,CAACC,GAAR,CAAYc,EAAZ;AACA,cAAM;AAAEX,UAAAA;AAAF,YAAkBW,EAAE,CAACG,IAA3B;AAEAV,QAAAA,QAAQ,CAACf,kBAAkB,CAACW,WAAD,CAAnB,CAAR;AAEA,eAAOb,aAAa,CAACqB,cAAD,CAApB;AACD,OAXD,CAWE,OAAOO,MAAP,EAAe;AACf,eAAOb,OAAO,CAACC,MAAR,CAAeY,MAAf,CAAP;AACD;AACF;;AACD,WAAOb,OAAO,CAACC,MAAR,CAAeI,GAAf,CAAP;AACD,GA3BH;AA6BD,CA7CD;;AA+CA,eAAejB,iBAAf","sourcesContent":["import axiosInstance from \"./useAxios\";\r\nimport { getCookie } from \"./setCookie\";\r\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\r\n\r\nconst setupInterceptors = (store) => {\r\n  axiosInstance.interceptors.request.use(\r\n    (config) => {\r\n      console.log(config);\r\n      const users = getCookie();\r\n      if (users) {\r\n        config.headers[\"Authorization\"] = \"Bearer \" + users?.accessToken; // for Spring Boot back-end\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  const { dispatch } = store;\r\n  axiosInstance.interceptors.response.use(\r\n    (res) => {\r\n      return res;\r\n    },\r\n    async (err) => {\r\n      const users = getCookie();\r\n      const originalConfig = err.config;\r\n\r\n      if (err.response.status === 401 && !originalConfig._retry) {\r\n        originalConfig._retry = true;\r\n\r\n        try {\r\n          const rs = await axiosInstance.post(\"/refresh_token/\", {\r\n            refreshToken: users?.refreshToken,\r\n          });\r\n\r\n          console.log(rs);\r\n          const { accessToken } = rs.data;\r\n\r\n          dispatch(refreshTokenAction(accessToken));\r\n\r\n          return axiosInstance(originalConfig);\r\n        } catch (_error) {\r\n          return Promise.reject(_error);\r\n        }\r\n      }\r\n      return Promise.reject(err);\r\n    }\r\n  );\r\n};\r\n\r\nexport default setupInterceptors;\r\n"]},"metadata":{},"sourceType":"module"}