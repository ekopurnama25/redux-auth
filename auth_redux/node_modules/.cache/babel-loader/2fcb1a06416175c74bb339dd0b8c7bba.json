{"ast":null,"code":"import axiosInstance from \"./useAxios\";\nimport { getCookie } from \"./setCookie\";\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\n\nconst setupInterceptors = store => {\n  axiosInstance.interceptors.request.use(config => {\n    const users = getCookie();\n\n    if (users) {\n      config.headers[\"Authorization\"] = \"Bearer \" + (users === null || users === void 0 ? void 0 : users.accessToken); // for Spring Boot back-end\n    }\n\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  const {\n    dispatch\n  } = store;\n  axiosInstance.interceptors.response.use(res => {\n    return res;\n  }, async err => {\n    const users = getCookie();\n    const originalConfig = err.config;\n\n    if (err.response.status === 401 && !originalConfig._retry) {\n      originalConfig._retry = true;\n\n      try {\n        const req = await axiosInstance.post(\"/refresh_token/\", {\n          refreshToken: users === null || users === void 0 ? void 0 : users.refreshTOken\n        });\n        const accessToken = req.data;\n        console.log(accessToken);\n        dispatch(refreshTokenAction(req.data));\n        return axiosInstance(originalConfig);\n      } catch (_error) {\n        return Promise.reject(_error);\n      }\n    }\n\n    return Promise.reject(err);\n  });\n};\n\nexport default setupInterceptors;","map":{"version":3,"sources":["C:/PROJECT REACT STATE MANAGEMENT/REACT-REDUX-AUTH/auth_redux/src/utils/setupInterceptors.js"],"names":["axiosInstance","getCookie","refreshTokenAction","setupInterceptors","store","interceptors","request","use","config","users","headers","accessToken","error","Promise","reject","dispatch","response","res","err","originalConfig","status","_retry","req","post","refreshToken","refreshTOken","data","console","log","_error"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,YAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,kBAAT,QAAmC,qCAAnC;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnCJ,EAAAA,aAAa,CAACK,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACGC,MAAD,IAAY;AACV,UAAMC,KAAK,GAAGR,SAAS,EAAvB;;AACA,QAAIQ,KAAJ,EAAW;AACTD,MAAAA,MAAM,CAACE,OAAP,CAAe,eAAf,IAAkC,aAAYD,KAAZ,aAAYA,KAAZ,uBAAYA,KAAK,CAAEE,WAAnB,CAAlC,CADS,CACyD;AACnE;;AACD,WAAOH,MAAP;AACD,GAPH,EAQGI,KAAD,IAAW;AACT,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GAVH;AAaA,QAAM;AAAEG,IAAAA;AAAF,MAAeX,KAArB;AACAJ,EAAAA,aAAa,CAACK,YAAd,CAA2BW,QAA3B,CAAoCT,GAApC,CACGU,GAAD,IAAS;AACP,WAAOA,GAAP;AACD,GAHH,EAIE,MAAOC,GAAP,IAAe;AACb,UAAMT,KAAK,GAAGR,SAAS,EAAvB;AACA,UAAMkB,cAAc,GAAGD,GAAG,CAACV,MAA3B;;AAEA,QAAIU,GAAG,CAACF,QAAJ,CAAaI,MAAb,KAAwB,GAAxB,IAA+B,CAACD,cAAc,CAACE,MAAnD,EAA2D;AACzDF,MAAAA,cAAc,CAACE,MAAf,GAAwB,IAAxB;;AAEA,UAAI;AACF,cAAMC,GAAG,GAAG,MAAMtB,aAAa,CAACuB,IAAd,CAAmB,iBAAnB,EAAsC;AACtDC,UAAAA,YAAY,EAAEf,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEgB;AADiC,SAAtC,CAAlB;AAIA,cAAMd,WAAW,GAAIW,GAAG,CAACI,IAAzB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYjB,WAAZ;AACAI,QAAAA,QAAQ,CAACb,kBAAkB,CAACoB,GAAG,CAACI,IAAL,CAAnB,CAAR;AAEA,eAAO1B,aAAa,CAACmB,cAAD,CAApB;AACD,OAVD,CAUE,OAAOU,MAAP,EAAe;AACf,eAAOhB,OAAO,CAACC,MAAR,CAAee,MAAf,CAAP;AACD;AACF;;AACD,WAAOhB,OAAO,CAACC,MAAR,CAAeI,GAAf,CAAP;AACD,GA1BH;AA4BD,CA3CD;;AA6CA,eAAef,iBAAf","sourcesContent":["import axiosInstance from \"./useAxios\";\r\nimport { getCookie } from \"./setCookie\";\r\nimport { refreshTokenAction } from \"../redux/actions/refreshTokenAction\";\r\n\r\nconst setupInterceptors = (store) => {\r\n  axiosInstance.interceptors.request.use(\r\n    (config) => {\r\n      const users = getCookie();\r\n      if (users) {\r\n        config.headers[\"Authorization\"] = \"Bearer \" + users?.accessToken; // for Spring Boot back-end\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  const { dispatch } = store;\r\n  axiosInstance.interceptors.response.use(\r\n    (res) => {\r\n      return res;\r\n    },\r\n    async (err) => {\r\n      const users = getCookie();\r\n      const originalConfig = err.config;\r\n\r\n      if (err.response.status === 401 && !originalConfig._retry) {\r\n        originalConfig._retry = true;\r\n\r\n        try {\r\n          const req = await axiosInstance.post(\"/refresh_token/\", {\r\n            refreshToken: users?.refreshTOken,\r\n          });\r\n\r\n          const accessToken  = req.data;\r\n          console.log(accessToken);\r\n          dispatch(refreshTokenAction(req.data));\r\n\r\n          return axiosInstance(originalConfig);\r\n        } catch (_error) {\r\n          return Promise.reject(_error);\r\n        }\r\n      }\r\n      return Promise.reject(err);\r\n    }\r\n  );\r\n};\r\n\r\nexport default setupInterceptors;\r\n"]},"metadata":{},"sourceType":"module"}